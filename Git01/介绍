1、什么是GIT
    git是一个开源的分布式版本控制系统，用于高效的管理各种大小项目和文件

2、代码管理工具的用途
    * 防止代码丢失，做备份
    * 项目的版本管理和控制，可以通过设置节点进行跳转
    * 建立各自的开发环境分支，互不影响，方便合并
    * 在多终端开发时，方便代码的相互传输
3、git的特点
    * 是开源的，多在*nix下使用，可以管理各种文件
    * git是分布式的项目管理工具(svn是集中式的)
    * git数据管理更多样化，分享速度快，数据安全
    * git拥有更好的分支支持，方便多人协调

本地计算机：工作区；暂存区；仓库
网络主机：远程仓库

1、配置用户名
配置所有用户：git config --system user.name 名字
配置文件位置：cat /etc/gitconfig
配置当前用户：git config --global[选项]
配置文件位置：~/.gitconfig
配置当前项目：git config[选项]
配置文件位置：project/.git/config

1、配置用户名
git config --system user.name 名字
查看：cat /etc/gitconfig
2、配置用户邮箱
git config --global user.email 邮箱地址
查看：cat .gitconfig
创建工程目录：mkdir gitproject
到达工程目录：cd gitproject/
初始化工程目录：git init     意义在于后续在gitproject目录下写的所有内容都可以使用git进行管理；gitproject做为项目的根目录
配置编译器： git config core.editor pycharm
查看隐藏文件：ls -a
查看编译器： cat .git/config



1、初始化仓库
git init
意义在于后续在gitproject目录下写的所有内容都可以使用git进行管理；gitproject做为项目的根目录
2、查看本地仓库状态
git status
初始化仓库默认工作在master分支，当工作区与仓库区不一致时会有提示
3、将工作内容记录到暂存区
git add [files..]
git add .或者*
eg. 将a,b记录到暂存区
git add a b
eg. 将所有文件记录到暂存区
git add *
4、将暂存区的文件撤回
git rm --cached README.md
5、将文件同步到本地仓库
git commit [file] -m [message]
说明：-m表示添加一些同步信息，表达同步内容
eg. 将暂存区所有记录同步到仓库区
git commit -m 'add files'
6、查看commit日志记录
git log
git log --pretty=oneline
7、比较工作区文件与仓库文件差异
git diff [file]
8、将暂存区或者某个commit点文件恢复到工作区
git checkout [commit] -- [file]
git checkout -- [file]
 -- 为了防止误操作，checkout还有切换分支的作用
9、移动或者删除文件
git mv [file] [path]
git rm [files]
注意：这两个操作会修改工作区内容，同时将操作记录提交到暂存区。
10、将移动或者删除操作同步到仓库区
git commit -m "mv and rm"

.gitignore忽略规则简单说明



版本控制
1、退回到上一版本
git reset --hard HEAD^
reset --hard表示版本退回
HEAD表示指向最新版本的指针
退回到上一版本，让工作区与仓库区达到一致，注意：工作区未提交的文件会被抹除
指定退往某一次commit操作
git reset --hard [commit编码前7位]
2、查看所有操作
git reflog
3、创建标签
标签：在项目的重要commit位置添加快照，保存当时的工作状态，一般用于版本的迭代。
git tag [tag_name] [commit_id] -m [message]
说明：commit_id可以不写则默认标签表示新的commit_id位置，message也可以不写，但是最好添加。
eg.在最新的commit处添加标签v1.0
git tag v1.0 -m '版本1'
git tag v0.9 [commit编码前7位] -m '版本0.9'
4、查看标签
git tag
git log --pretty=oneline
查看详细信息
git show v1.0
5、去往哪个标签结点
git reset --hard [tag]
6、删除标签
git tag -d v0.9


保存工作区
1、保存工作区内容
git stash save [message]
说明：将工作区未提交的修改封存，让工作区回到修改前的状态
2、查看工作区列表
git stash list
说明：最新保存的工作区在上面
3、应用某个工作区
git stash apply [stash@{n}]
之后还需要向暂存区和仓库提交，add commit
git commit -m 'change Git01/介绍'
4、删除工作区
git stash drop [stash@{n}]
删除指定工作区
git stash drop clear
删除所有工作区


分支管理
定义：分支即每个人在原有代码（分支）的基础上建立自己的工作环境，
单独开发，互不干扰。完成开发工作后再进行分支统一合并。

1、查看分支情况
git branch
说明：前面带*的分支表示当前工作分支
2、创建分支
git branch [branch_name]
说明：基于a分支创建b分支，此时b分支会拥有a分支全部内容，在创建b
分支时最好保持a分支"干净"状态。
3、切换分支
git checkout [branch_name]
4、创建并切换到那个分支
git checkout -b [branch_name]
5、合并各个分支
git merge [branch_name]
冲突解决
<<<<<<< HEAD
git commit -m 'merge files'
冲突问题是合并分支过程中最为棘手的问题
    当分支合并时，原分支和以前发生了变化就会产生冲突当合并分支时添加
    新的模块（文件），这种冲突可以自动解决，只需自己决定commit操作即可。
    当合并分支时两个分支修改同一个文件，则需要手动解决冲突。
6、删除分支
git branch -d [branch_name]           删除分支
git branch -D [branch_name]           删除没有被合并的分支







