1、进程间通信
    * 管道通信 Pipe()   p.send()    p.recv()
    * 消息队列 Queue()   q.get()   q.put()
    * 共享内存 Value()   Array()
    * 信号量   Semaphore()    acquire()    release()

2、threading创建线程
    Thread()   创建线程对象
    start()    启动线程
    join()     回收线程

3、线程属性  name is_aliver

4、自定义线程类

    同步互斥方法：Event()    wait()    set()    clear()
               Lock()     acquire()      release()

5、死锁
    由于上锁导致的程序阻塞



python源于ABC
python线程GIL
1、python线程的GIL问题（全局解释器锁）
python解释器同一时刻只能解锁执行一个线程，大大降低了线程的执行效率。

因为遇到阻塞时线程会主动让出解释器，去解释其他线程，所以python多线程在执行多阻塞高延迟IO时可以提升程序效率，
其他情况并不能对效率有所提升。

GIL问题建议：
尽量使用进程完成无阻塞的并发行为
不使用C作为解释器（Jave C#）

结论：在无阻塞状态下，多线程程序和单线程程序执行效率差不多，甚至还不如单线程效率。但是多进程运行相同内容却可以有明显的效率提升。

进程与线程之间的区别和联系
进程与线程的使用场景：



